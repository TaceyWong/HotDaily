package main

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

var CODE = `// Code generated by meta_code; DO NOT EDIT

package hotdaily

func AutoRegistRouter( e *echo.Echo ) {
    %s := e.Group(%s)
	%s
    
}
`

func GenRouter(files []string) {
	// filepath.Base(path)
	routerG := "g"
	routers := []string{}
	partten := regexp.MustCompile(`\nfunc (.*?)\(.*? echo.Context\) \w+ {\n`)
	for _, file_path := range files {
		data, _ := os.ReadFile(file_path)
		dataS := string(data)
		// fmt.Println(file_path, partten.MatchString(string(data)))
		pResult := partten.FindStringSubmatch(dataS)
		if len(pResult) == 2 {
			// fmt.Println(file_path, pResult[1])
			path := strings.Replace(filepath.Base(file_path), ".go", "", 1)
			routers = append(routers, fmt.Sprintf(`    %s.GET("/%s", %s)`, routerG, path, pResult[1]))
			routers = append(routers, fmt.Sprintf(`    %s.POST("/%s", %s)`, routerG, path, pResult[1]))

		} else {
			fmt.Println(file_path, "NOT MATCH")
		}
	}

	fmt.Println(strings.Join(routers, "\n"))

}

func main() {
	dir_path := "routers"
	if len(os.Args) > 1 {
		dir_path = os.Args[1]
	}
	files := []string{}
	_ = filepath.Walk(dir_path, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() && filepath.Ext(path) == ".go" {
			files = append(files, path)
		}
		return nil
	})
	GenRouter(files)
}
